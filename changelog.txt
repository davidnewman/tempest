===============================================================================
Tempest jQuery Templating Plugin 0.3
===============================================================================

New Features
-------------------------------------------------------------------------------

* Store templates in any type of element (as long as it has a
  class="tempest-template") instead of only textareas.

* Simple boolean logic.

* Create custom tags, see the README at http://github.com/fitzgen/tempest

* All known bugs and issues fixed.

===============================================================================
Tempest jQuery Templating Plugin 0.2
===============================================================================

Backwards incompatibilities
-------------------------------------------------------------------------------

* <textarea> templates are indexed by the "title" attribute as their key, 
  rather than the "id" attribute. I realized I was prepending "template-" on to 
  all of the id's to avoid a namespace collision and it was making the code 
  more verbose. I value brevity in my code.

New features
-------------------------------------------------------------------------------

* Access objects' children and attributes with the dot notation. So 
  "{{ obj.child.attr }}" is completely legit.

* If "{{ object }}" is any object besides a jQuery instance (see the bug fixes 
  below), Tempest will try calling a "toHTML()" method if it exists. If not, it 
  will default to the "toString()" method.

* Calling "$.tempest()" without any parameters will return an array of all the 
  key/template pairs that Tempest has stored right now

Bug fixes
--------------------------------------------------------------------------------

* If "{{ non-existent }}" is included in the template but "non-existent" is
  not passed to Tempest, "{{ non-existent }}" is rendered as an empty string.
  Before this fix, the template tag would have been left in the rendered
  version.

* If "{{ thing }}" is a jQuery object, it will be properly rendered, rather
  than calling "toString()" on the object.
